The Polygon Processor (PP) is a processor built from discrete components
   the ALU is provided by a Logic L4C381 (operational equivalent of 4 74381 ALU's to provide 16 bit, with 2 input registers and 1 output register)
   2 * 2 * 74 377 8 bit registers to provide 16 bit registers for pipelined register of ALU outputs ?
   72 bit wide (9 * 2 * 4 bits * 4K) microcode ram
   16 bit wide (4 * 4 bits * 4K) SRAM data memory
   two 16 bit wide (4 * 4 bits * 4K) vertex buffers, the GE can write data into one buffer while the PP works with data in the other
   3 * 74 283 adders for a 12 bit program counter
   3 * 74 258 2 to 1 multiplexer for 12 bit branch address selection
   3 * PAL16R8 for a program stack
   2 * 74 569 up/down counters + another 4 bits of register (PAL16R4?) for a 12 bit memory/vertex pointer
   3 * 74 157 2 to 1 multiplexer for 12 bit memory address selection
   1 * PAL16L4? for condition flag latch and branch condition calculation
   1 * 74 151 8 to 1 multiplexer for branch condition selection
   interface to Edge Processor (EP) and Slope Calculator (SC)

   For purposes of describing the architecture:
     the ALU has two operand registers A and B
     the ALU has an output register F or F0
     the output from the instruction one cycle previous will be called F1
     the output from the instruction two cycles previous will be called F2
     the input to the ALU will be called R
     a command has a word count, register WC, indicating how many words of parameters are in SRAM or the vertex buffer, starting at address 0
     the vertex pointer will be called VP, although it can store a full 12 bits of address
     a vertex consists of eight 16 bit words, nominally {X, Y, Z high word, Z low word, red, green, blue, alpha}
     incrementing the vertex pointer increases by one vertex or eight words
     decrementing the vertex pointer decreases by one vertex or eight words

   The PP can receive commands from either the GE or the GM. Each 8 bit command tag is used as an address into the first 256 instructions
   to give the first instruction for executing that command.
   
   The condition flags for branching are determined by the instruction two cycles previous to the branch instruction.
   Writes to EP registers are from the ALU output two cycles previous, F2

   The GM can read the ALU output (likely F2) at address c800c000

Disassembly output

addr  unknown bits imm   VP op  ALU op         load   bus op   EP    flag pgram flow GM 
-----|------------|-----|------|--------------|------|--------|------|---|----------|-------
0100: 0n1 0s21w z0 I0f9a VPLI   PASS A         LOAD A r SVI               bGM   P100       #  VP = 0f9a; A = (0f9a); wait for GM
0101: 0n0 0s21w z0 I0000        PASS A         LOAD B r WC                halt       GM(0) #  B = word count; halt PP

0102: 0n0 0s21w z0 I2000        PASS A                r I                 bGM   P102 GM(1) #  wait for GM
0103: 0n1 0s21w z0 I0001        PASS A         LOAD A r I                                  #  A = 0001
0104: 0n0 0s21w z0 I0000        PASS A         LOAD B r WC                halt       GM(0) #  B = word count; halt PP

0105: 0n1 0s21w z0 I0000 VPLI   PASS A         LOAD A r VBI                                #  VP = 0000; A = VP(0)
0106: 0n1 0s21w z0 I0000        PASS A                r I                                  #
0107: 0n1 0s21w z0 I0000        PASS A                r I                                  #
0108: 1n1 1s8fw z1 I0000        PASS A                r I      EPcmnd     b     P102       #  EP command = A from inst 0106; branch inst 0102

Operations occur in a left to right order.  The VP operation first, next the ALU operation, followed by loading new ALU operands.


Columns description

  addr - this is the address of the instruction in microcode memory

  unknown bits - this is a representation of bits with meaning as yet to be determined
                 the 'n', 's', 'w' and 'z' are for indexing purposes as described in 'Microcode decoding process' section

  imm - the immediate field of the instruction, interpreted as data

  VP op - vertex pointer operation, occurs before ALU op and ALU bus op

                   a blank field indicates no VP operation
    VP++           increment vertex pointer
    VP--           decrement vertex pointer
    VPLI           load vertex pointer from immediate field
    VPLR           load vertex pointer from ALU input selection of instruction one cycle previous
    VPLF           load vertex pointer from ALU output of instruction two cycles previous (operation might not exist)

  ALU op - ALU operation, occurs before ALU load;  a combination of ALU opcode, operand selections and carry flag
           although 128 combinations are possible, the following are all that appear to be used or useful

    CLEAR          output 0000
    DEC A          output A + NOT(0) + 0 carry
    DEC B          output NOT(0) + B + 0 carry
    INC A          output A + 0 + 1 carry
    INC B          output 0 + B + 1 carry
    NEG A          output NOT(A) + 0 + 1 carry
    NEG B          output 0 + NOT(B) + 1 carry
    NOT(A)         output NOT(A) + 0 + 0 carry
    NOT(B)         output 0 + NOT(B) + 0 carry
    NOT(A) + B     output NOT(A) + B + 0 carry
    A + NOT(B)     output A + NOT(B) + 0 carry
    PASS A         output A + 0 + 0 carry
    PASS B         output 0 + B + 0 carry
    PRESET         output ffff
    A + B          output A + B + 0 carry
    A + B + C      output A + B + carry (latched from previous instruction), double precision addition
    A XOR B        output A XOR B + 0 carry
    A OR B         output A OR B + 0 carry
    A AND B        output A AND B + 0 carry
    A - B          output A + NOT(B) + 1 carry
    B - A          output NOT(A) + B + 1 carry
    A + NOT(B) + C output A + NOT(B) + C (latched from previous instruction), double precision subtraction
    NOT(A) + B + C output NOT(A) + B + C (latched from previous instruction), double precision subtraction

  load - ALU load operation

                   a blank field indicates no load operation
    LOAD A         load ALU A register
    LOAD B         load ALU B register
    LOAD AB        load ALU A and B register (does not occur in valid microcode)

  bus op

    r/w            read (to the ALU input bus) or write (from the ALU output)
    I              immediate field
    F1I            ALU output of one cycle previous write to vertex pointer address with lower address bits from immediate field
    F1P            ALU output of one cycle previous write to vertex pointer address
    F1             ALU output of one cycle previous (read to ALU input)
    SVI            SRAM using address of vertex pointer with lower address bits from immediate field
    SVP            SRAM using address of vertex pointer
    VB             indicates a write to the vertex buffer, the ALU load bits might also be used in specifying the vertex buffer
    VBI            vertex buffer using address of vertex pointer with lower address bits from immediate field
    VBP            vertex buffer using address of vertex pointer
    VP             the value of the vertex pointer
    WC             the value of the word count register

    when under GM control, VBI and VBP operations appear to be redirected to SRAM and the WC is from the GM PP SRAM word count c8004000
    when under GE control, VBI and VBP operations refer to the vertex buffer and the WC is from the GE PP word count c800a000

  EP - EP register to be written

    x/y/z/r/g/b/a  x, y, z, red, green, blue or alpha DDA unit
            ma lo  'a' side slope, lower bits
            ma hi  'a' side slope, higher bits (not confirmed, EP diagnostic test suggests the registers have 48 bit precision)
            mb lo  'b' side slope, lower bits
            mb hi  'b' side slope, higher bits (not confirmed, EP diagnostic test suggests the registers have 48 bit precision)
                a  'a' side starting value
	        b  'b' side starting value
	      unk  name unknown, but loads both the 'a' and 'b' side starting values to the same
            count  a generic count, countdowns with each pixel step, use determined by the EP command
    EPcmnd         EP command register, the EP command to execute
    unk 7,1        not used, unknown purpose
    stipple        stipple pattern, a 16 bit shift register
    unk 7,3        not used, unknown purpose
    unk 7,4        not used, unknown purpose
    pbptr          pixel buffer ptr, starting address for EP pixel buffer operation
    EPmode         EP mode register, keeps track of RGB vs. color index mode, anti-alias (coverage as alpha) mode, pixel buffer operation source
    recip          reciprocal, related to the slope calculator, the individual DDA units receive dr, dg, db, etc. but need dr/dx, dg/dx, db/dx
                   this would usually be set to dx to provide the denominator for these calculations, but also seems capable of providing
		   a means to set the 'a' or 'b' side starting values with more than 16 bit precision for the z unit      
      
  flag - flag control operation

                   a blank field indicates to latch flags of current operation
    hf             hold flags from previous operation, do not latch flags of current operation

  pgram flow - program flow operation, occurs after all other operations, condition determined by instruction two cycles previous
               unless hold flags was used
	       
	           a blank field indicates sequential program flow, no branch or call
    beq, ceq       branch or call if equal (zero flag true)
    b, c           branch or call no condition
    blteq, clteq   branch or call if less than or equal (carry flag true)
    bgt, cgt       branch or call if greater than (sign bit/flag false, zero flag false)
    bneq, cneq     branch or call if not equal (zero flag false)
    blt, clt       branch or call if less than (sign bit/flag true)
    bGM, cGM       branch or call if GM busy (undetermined what indicates the GM is busy)
    bEP, cEP       branch or call if EP busy

  GM - GM communication, likely toggles bits in the GM/PP status register cc000000

                   a blank field indicates no operation
                   0 usually at start of PP commands
                   1 usually at end of PP commands
                   2 transfer to GM ?
                   3 resume from GM, transfer to GE ?
                   4 used to send PP interrupt
                   5 not used
                   6 used at start of pixel buffer operation
                   7 used at end of pixel buffer operation




Microcode decoding process

  Originally looking at the 72 bit wide PP microcode from the GM PROM and starting with the knowledge that the first 
0xff instructions are used as a jump table to dispatch commands, the pattern '80 b0 d4 7d 10 fe' is repeated in almost
all instructions.  For these instructions, an increasing sequence, matching the instruction offset was noticed.
The other instructions with '80 b0 dc 3d 10 fe' coincide with the command indices the GM PROM code for the 68020
sends to the PP.  For these instructions the remaining half of the first three columns establishes an instruction
offset for a jump.

0000: 00 01 00 80 b0 dc 3d 10 fe -> 100 000
0001: 2a 11 00 80 b0 d4 7d 10 fe -> 12a 001
0002: 2a 21 00 80 b0 d4 7d 10 fe -> 12a 002
0003: 2a 31 00 80 b0 d4 7d 10 fe -> 12a 003
0004: 2a 41 00 80 b0 d4 7d 10 fe -> 12a 004
0005: 2a 51 00 80 b0 d4 7d 10 fe -> 12a 005
0006: 2a 61 00 80 b0 d4 7d 10 fe -> 12a 006
0007: 30 01 00 80 b0 dc 3d 10 fe -> 130 000
0008: 5b 01 00 80 b0 dc 3d 10 fe -> 15b 000
0009: 2a 91 00 80 b0 d4 7d 10 fe -> 12a 009 
000a: 2a a1 00 80 b0 d4 7d 10 fe -> 12a 00a
000b: 2a b1 00 80 b0 d4 7d 10 fe -> 12a 00b
000c: 2a c1 00 80 b0 d4 7d 10 fe -> 12a 00c
000d: 2a d1 00 80 b0 d4 7d 10 fe -> 12a 00d
000e: 2a e1 00 80 b0 d4 7d 10 fe -> 12a 00e
000f: 2a f1 00 80 b0 d4 7d 10 fe -> 12a 00f
0010: 88 01 00 80 b0 dc 3d 10 fe -> 188 000
0011: 2a 11 01 80 b0 d4 7d 10 fe -> 12a 011
0012: 2a 21 01 80 b0 d4 7d 10 fe -> 12a 012
0013: 24 02 00 80 b0 dc 3d 10 fe -> 224 000
0014: 2a 41 01 80 b0 d4 7d 10 fe -> 12a 014
0015: 2a 51 01 80 b0 d4 7d 10 fe -> 12a 015
0016: f6 01 00 80 b0 dc 3d 10 fe -> 1f6 000
0017: 2a 71 01 80 b0 d4 7d 10 fe -> 12a 017
0018: 02 01 00 80 b0 dc 3d 10 fe -> 102 000
0019: 2a 91 01 80 b0 d4 7d 10 fe -> 12a 019
001a: 2a a1 01 80 b0 d4 7d 10 fe -> 12a 01a
001b: 2a b1 01 80 b0 d4 7d 10 fe -> 12a 01b
001c: 2a c1 01 80 b0 d4 7d 10 fe -> 12a 01c
001d: 2a d1 01 80 b0 d4 7d 10 fe -> 12a 01d
001e: 2a e1 01 80 b0 d4 7d 10 fe -> 12a 01e
001f: 2a f1 01 80 b0 d4 7d 10 fe -> 12a 01f
0020: 2a 01 02 80 b0 d4 7d 10 fe -> 12a 020
0021: 2a 11 02 80 b0 d4 7d 10 fe -> 12a 021
0022: 2a 21 02 80 b0 d4 7d 10 fe -> 12a 022
0023: 2a 31 02 80 b0 d4 7d 10 fe -> 12a 023
0024: 2a 41 02 80 b0 d4 7d 10 fe -> 12a 024
0025: 2a 51 02 80 b0 d4 7d 10 fe -> 12a 025
0026: 2a 61 02 80 b0 d4 7d 10 fe -> 12a 026
0027: 2a 71 02 80 b0 d4 7d 10 fe -> 12a 027
0028: 2a 81 02 80 b0 d4 7d 10 fe -> 12a 028
0029: 2a 91 02 80 b0 d4 7d 10 fe -> 12a 029
002a: 2a a1 02 80 b0 d4 7d 10 fe -> 12a 02a
002b: 2a b1 02 80 b0 d4 7d 10 fe -> 12a 02b
002c: 2a c1 02 80 b0 d4 7d 10 fe -> 12a 02c
002d: 2a d1 02 80 b0 d4 7d 10 fe -> 12a 02d
002e: 2a e1 02 80 b0 d4 7d 10 fe -> 12a 02e
002f: 2a f1 02 80 b0 d4 7d 10 fe -> 12a 02f

Having given an interpretation to the first 24 bits of the instruction, the remaining bits were indexed to allow
text searching as follows:

00000000 00111111 11112222 2 22 22 23 33 33 33 33 34 44 44 44 44 45 55 55 55 55 56 66 66 66 66 67 7
01234567 89012345 67890123 4 56 78 90 12 34 56 78 90 12 34 56 78 90 12 34 56 78 90 12 34 56 78 90 1

PPPPPPPP IIIIPPPP IIIIIIII .a..b..c..d..e..f..g..h..i..j..k..m..n..p..q..r..s..t..u..v..w..x..y..z.
00000000 00001100 11000000
76543210 32101098 10987654

Disassembly of instructions now looked like this:

0000: P100 I000 1a00b00c00d0 1e01f10g00h0 1i10j11k10m0 0n01p11q10r1 0s00t10u00v0 1w11x11y11z0
0001: P12a I001	1a00b00c00d0 1e01f10g00h0 1i10j10k10m0 0n11p11q10r1 0s00t10u00v0 1w11x11y11z0
0002: P12a I002	1a00b00c00d0 1e01f10g00h0 1i10j10k10m0 0n11p11q10r1 0s00t10u00v0 1w11x11y11z0
0003: P12a I003	1a00b00c00d0 1e01f10g00h0 1i10j10k10m0 0n11p11q10r1 0s00t10u00v0 1w11x11y11z0
0004: P12a I004	1a00b00c00d0 1e01f10g00h0 1i10j10k10m0 0n11p11q10r1 0s00t10u00v0 1w11x11y11z0
0005: P12a I005	1a00b00c00d0 1e01f10g00h0 1i10j10k10m0 0n11p11q10r1 0s00t10u00v0 1w11x11y11z0
0006: P12a I006	1a00b00c00d0 1e01f10g00h0 1i10j10k10m0 0n11p11q10r1 0s00t10u00v0 1w11x11y11z0
0007: P130 I000	1a00b00c00d0 1e01f10g00h0 1i10j11k10m0 0n01p11q10r1 0s00t10u00v0 1w11x11y11z0

At this point breaking the instructions at the jump destinations allowed some determination of the instruction bits
specifying program flow.  Looking at the microcode 'ppdiag.u' provided identification of  the bits specifying ALU opcode,
ALU carry input, ALU input loading, branch conditions, vertex pointer (VP) operations, the top 4 bits of the immediate
field and some of the bus routing.  The 'epdiag.u' microcode provided identification of the bits specifying
EP registers.

bits 12,13,14,15, 00,01,02,03, 04,05,06,07
  program branch address
bits 28,29,30,31, 16,17,18,19, 20,21,22,23, 08,09,10,11
  immediate field
bit 36
  program flow
  0 branch
  1 sequential 
bits 25,26
  stack operation
  0 branch, no stack operation
  1 call, push stack
  2 return, pop stack
  3 invalid operation
bits 37
  always set 0, possible extension of branch operation selection
bits 38,39,24
  branch operation
  0 eq (zero flag true)
  1 always
  2 lteq (carry flag true)
  3 gt (sign bit/flag false, zero flag false)
  4 neq (zero flag false)
  5 lt (sign bit/flag true)
  6 GM busy
  7 EP busy
bit 27
  0 continue
  1 halt
bits 32,47
  ALU operand selection
  0 A + F, accumulate
  1 PASS B, (A input = 0)
  2 PASS A, (B input = 0)
  3 A + B
bits 33,34,35
  ALU opcode
  0 CLEAR
  1 NOT(A) + B
  2 A + NOT(B)
  3 A + B
  4 A XOR B
  5 A OR B
  6 A AND B
  7 PRESET
bit 40
 bus operation, possibly ALU output routing
 0 ALU output to ALU input
 1 other bus input
bit 41
 bus operation
 0 write
 1 read
bit 42
 flag latch control
 0 latch flags
 1 hold flags
bits 43,44
 ALU load
 0 load A,B
 1 load B
 2 load A
 3 no load
bits 45,46
 ALU carry in control
 0 carry in = carry out
 1 not used
 2 carry in = 0
 3 carry in = 1
bits 48,56,71
 any bit set indicates an EP register write, unknown individual operation
bit 49
 GM communication, likely toggling flags in the GM/PP status register cc000000
 0 do operation 
 1 no operation
 uses top three bits of immediate field to differentiate operations
 0 used at start of PP commands
 1 used at end of PP commands
 2 transfer to GM ?
 3 resume from GM, transfer to GE ?
 4 used to send PP interrupt
 5 not used
 6 used at start of pixel buffer operation
 7 used at end of pixel buffer operation
bit 50
 bus operation, possibly VP load selection
 0 previous ALU input
 1 immediate field
bit 51
 bus operation, possibly address format
 0 vertex pointer and lower bits from immediate field
 1 all bits from pointer
bits 52,53
 VP operation
 0 VP decrement
 1 VP increment
 2 VP load
 3 VP no op
bits 54,55
 bus operation, possibly source/destination selection
 0 SRAM
 1 immediate field
 2 vertex buffer
 3 ALU output
bits 57,58,59,60,61,62,63,64
 related/coincident to EP register writes, possibly control of slope calculator and data shifting
bits 65,66,67
 EP unit selection
 0 alpha
 1 blue
 2 green
 3 red
 4 z
 5 y
 6 x
 7 other control registers
bits 68,69,70
 EP unit register selection
 0 ma low
 1 ma high
 2 mb low
 3 mb high
 4 a
 5 b
 6 a and b
 7 count

 for other control registers
 0 command
 1 not used
 2 stipple
 3 not used
 4 not used
 5 pixel buffer ptr
 6 mode
 7 recip (slope calculator)
 